(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{1366:function(t,a,e){"use strict";e.r(a);var n=e(81),s=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"custom-command-basics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#custom-command-basics"}},[t._v("#")]),t._v(" Custom Command Basics")]),t._v(" "),a("p",[a("strong",[t._v("Learn about the development process and fundamentals of custom command-type AddOns by creating JAKA_Command.")])]),t._v(" "),a("h2",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),a("p",[t._v("  We will create a custom command-type AddOn that outputs different content in the App log based on the content on the command block.")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{width:"800",src:e(690)}})]),t._v(" "),a("h2",{attrs:{id:"creating-jaka-command"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-jaka-command"}},[t._v("#")]),t._v(" Creating JAKA_Command")]),t._v(" "),a("h3",{attrs:{id:"step-1-create-an-addon-package"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-1-create-an-addon-package"}},[t._v("#")]),t._v(" Step 1: Create an AddOn Package")]),t._v(" "),a("p",[t._v("  First, we need to create the basic AddOn files, including a .ini configuration file and a JSON file for data storage. You can create them manually from scratch or modify the AddOn template in the "),a("a",{attrs:{href:"https://github.com/JakaCobot/jaka_addon_kit",target:"_blank",rel:"noopener noreferrer"}},[t._v('"'),a("em",[t._v("Template")]),t._v('"'),a("OutboundLink")],1),t._v(" directory in the AddOn development package repository.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Directory Structure")]),t._v(" "),a("p",[t._v("|——JAKA_Command"),a("br"),t._v("\n   |——AddOn.json"),a("br"),t._v("\n   |——JAKA_Command_config.ini")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("AddOn.json")]),a("br"),t._v("\n  The JSON file can be empty; data will be generated in the following steps.")]),t._v(" "),a("li",[a("strong",[t._v("JAKA_Command_config.ini")]),a("br"),t._v("\n  The "),a("RouterLink",{attrs:{to:"/en/guide/addOn/iniConfig.html"}},[t._v("configuration file")]),t._v(" should contain the following:"),a("div",{staticClass:"language-ini extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ini"}},[a("code",[a("span",{pre:!0,attrs:{class:"token section"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token section-name selector"}},[t._v("AddOnInfo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("convention")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("3.0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("name")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("JAKA_Command")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("description")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token inner-value"}},[t._v("Output information in the log")]),t._v('"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("version")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("1.0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("portal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("10006")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("url")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("http://localhost/myAddOnUi")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("languagetype")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("node-red")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("service")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("AddOn.json")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("serviceenabled")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("1")]),t._v("\n")])])])],1)]),t._v(" "),a("h3",{attrs:{id:"step-2-packaging-uploading"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-2-packaging-uploading"}},[t._v("#")]),t._v(" Step 2: Packaging & Uploading")]),t._v(" "),a("p",[t._v("  Next, we will package the AddOn and upload it to the controller for command block development. The packaging format should be "),a("code",[t._v(".tar.gz")]),t._v(". On Windows, you can use tools like 7z for secondary compression."),a("br")]),a("div",{attrs:{align:"center"}},[a("img",{attrs:{width:"800",src:e(691)}})]),t._v("\n  In the App, go to the Attached Manager page to upload the AddOn."),a("br"),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{width:"800",src:e(692)}})]),a("p"),t._v(" "),a("h3",{attrs:{id:"step-3-develop-custom-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-3-develop-custom-commands"}},[t._v("#")]),t._v(" Step 3: Develop Custom Commands")]),t._v(" "),a("p",[t._v("  Run the AddOn and check the port it's running on.")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{width:"800",src:e(693)}})]),t._v(" "),a("p",[t._v("  Access the developer interface using "),a("code",[t._v("IP:Port")]),t._v(".")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{width:"1000",src:e(694)}})]),t._v(" "),a("p",[t._v("  Create custom command blocks using the "),a("code",[t._v("Customized Commands")]),t._v(" node. Define the appearance and properties of the command block on the "),a("em",[t._v("Basic Configuration")]),t._v(" page and its behavior on the "),a("em",[t._v("Script Generation")]),t._v(" page.")]),t._v(" "),a("ul",[a("li",[t._v("Refer to "),a("RouterLink",{attrs:{to:"/en/guide/jks.html"}},[t._v("JAKA Programming Scripts")]),t._v(" for script syntax.")],1),t._v(" "),a("li",[t._v("Refer to "),a("RouterLink",{attrs:{to:"/en/guide/addOn/Commands_Tool.html"}},[t._v("Creating Custom Commands Nodes")]),t._v(" for using the "),a("code",[t._v("Customized Commands")]),t._v(" node.")],1)]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{width:"1000",src:e(695)}})]),t._v(" "),a("p",[t._v("  When you save custom commands in the App, it will use an HTTP GET request to retrieve the script, so you need to complete the flow using the "),a("code",[t._v("http in")]),t._v(" and "),a("code",[t._v("http response")]),t._v(" nodes.")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{width:"1000",src:e(696)}})]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Note!")]),t._v(" "),a("p",[t._v("The URL of the "),a("code",[t._v("http in")]),t._v(" node should match the name of the custom command block!")])]),t._v(" "),a("h3",{attrs:{id:"step-4-running"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-4-running"}},[t._v("#")]),t._v(" Step 4: Running")]),t._v(" "),a("p",[t._v("  After deploying the flow in Node-RED, you can use the custom command block in the App.")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{width:"1000",src:e(697)}})]),t._v(" "),a("h2",{attrs:{id:"how-to-debug"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-debug"}},[t._v("#")]),t._v(" How to Debug?")])])}),[],!1,null,null,null);a.default=s.exports},690:function(t,a,e){t.exports=e.p+"assets/img/showcase.23bc5a40.png"},691:function(t,a,e){t.exports=e.p+"assets/img/compress_addon.01c8b684.gif"},692:function(t,a,e){t.exports=e.p+"assets/img/upLoad_addon.13380e49.png"},693:function(t,a,e){t.exports=e.p+"assets/img/run_addOn.00186c20.gif"},694:function(t,a,e){t.exports=e.p+"assets/img/developPage.01a9b62d.png"},695:function(t,a,e){t.exports=e.p+"assets/img/creat_block.148d5ca0.gif"},696:function(t,a,e){t.exports=e.p+"assets/img/Add_Http.57d4df37.gif"},697:function(t,a,e){t.exports=e.p+"assets/img/program_hello.bbf58bd2.gif"}}]);